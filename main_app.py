import csv

from flask import Flask, render_template, request, session, redirect, url_for
from flask import Flask, render_template,request,session,url_for,redirect,flash, send_file
import random
import uuid
from flask_mysqldb import MySQL
import os
import bcrypt
from werkzeug.utils import secure_filename
import random
from datetime import datetime
import MySQLdb.cursors
from flask_mysqldb import MySQL

import requests
import io
from PIL import Image
# from ultralytics import YOLO

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = './static/uploads/'
app.config['RESULT_FOLDER'] = './static/results/'

app = Flask(__name__)

app.secret_key = 'Pob'

app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = ''
app.config['MYSQL_DB'] = 'diet_plan'
mysql = MySQL(app)





@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        phone = request.form['phone']
        address = request.form['address']

        if not username or not email or not password:
            flash("Please fill in all required fields.", "error")
        else:
            # Check if the email is already taken
            cur = mysql.connection.cursor()
            cur.execute("SELECT COUNT(*) FROM users WHERE email = %s", (email,))
            count = cur.fetchone()[0]
            cur.close()

            if count > 0:
                flash("Email is already taken. Please choose a different one.", "error")
            else:
                # Hash the password before storing it
                cur = mysql.connection.cursor()
                cur.execute("INSERT INTO users (username, email, password, phone, address) VALUES (%s, %s, %s, %s, %s)",
                            (username, email, password, phone, address))
                mysql.connection.commit()
                cur.close()

                flash("Signup successful!", "success")
                return redirect(url_for('login'))

    return render_template('user_signup.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == "POST":
        email = request.form['email']
        password = request.form['password']

        # Check if the provided email matches a record in your database
        cur = mysql.connection.cursor()
        cur.execute("SELECT id, email, password FROM users WHERE email = %s", (email,))
        user = cur.fetchone()
        cur.close()

        if user and user[2] == password:
            session['user_id'] = user[0]
            session['user_email'] = user[1]
            flash("You are logged in successfully!", "success")

            return redirect(url_for('dashboard'))
        else:
            flash("Invalid email or password", "error")

    return render_template('user_login.html')





###########################################################

# Logiatic Regression Model

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Load the dataset from a CSV file
df = pd.read_csv('bmi_data.csv')

# Feature and target variables
X = df[['Height', 'Weight']]
y = df['Action']  # 0 for weight loss, 1 for weight gain

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the model
model = LogisticRegression(max_iter=1000)  # Increase max_iter if needed
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)


# print(f'Accuracy: {accuracy}')

# Function to calculate daily calorie and protein needs
def calculate_calories_protein(height, weight, goal):
    # Basic formulas (can be customized based on more accurate equations)
    # Maintenance Calories: 15 calories per pound of body weight
    maintenance_calories = weight * 15

    if goal == 'gain':
        # To gain weight: Add 500 calories per day
        calories_needed = maintenance_calories + 500
        protein_needed = weight * 1.2  # 1.2g protein per pound of body weight for muscle gain
    elif goal == 'loss':
        # To lose weight: Subtract 500 calories per day
        calories_needed = maintenance_calories - 500
        protein_needed = weight * 1.0  # 1.0g protein per pound of body weight for fat loss
    else:
        calories_needed = maintenance_calories
        protein_needed = weight * 0.8  # 0.8g protein per pound of body weight for maintenance

    return calories_needed, protein_needed


# Example usage: Calculate for the first entry in the test set
for i in range(len(X_test)):
    height = X_test[i][0]
    weight = X_test[i][1]
    goal = 'gain' if y_pred[i] == 1 else 'loss'

    calories_needed, protein_needed = calculate_calories_protein(height, weight, goal)
    # print(f"User {i + 1}:")
    # print(f"Goal: {'Weight Gain' if goal == 'gain' else 'Weight Loss'}")
    # print(f"Calories Needed: {calories_needed:.2f} kcal/day")
    # print(f"Protein Needed: {protein_needed:.2f} g/day")
    # print()


###########################################################
@app.route('/dashboard', methods=['GET', 'POST'])
def dashboard():
    user_email = session['user_email']
    userid = session.get('user_id')

    if session.get('user_id'):  # Check if the user is logged in
        if request.method == 'POST':
            age = request.form['age']
            gender = request.form['gender']
            height = request.form['height']
            weight = request.form['weight']
            goal = request.form['goal']
            health = request.form['conditions']

            # Convert height and weight to float
            height_meters = float(height) * 0.3048  # Assuming height is in feet, converting to meters
            weight_kg = float(weight)  # Convert weight to float

            # Calculate BMI
            BMI = weight_kg / (height_meters ** 2)
            session['bmi_result'] = BMI

            # Call predict_action with correct parameters
            session['gender'] = gender
            session['height'] = height
            session['weight'] = weight
            session['health'] = health

            result_model = 'Gain'

            return redirect(url_for('bmi_result'))

            flash("BMI calculated successfully!", "success")
            return render_template('dashboard.html', user_email=user_email)
        return render_template('dashboard.html', user_email=user_email)
    else:
        return redirect(url_for('login'))


@app.route('/bmi_result', methods=['GET'])
def bmi_result():
    # Retrieve session data
    userid = session.get('user_id')
    bmi = session.get('bmi_result')
    goal = session.get('result_model')
    gender = session.get('gender')
    height = session.get('height')
    weight = session.get('weight')
    health = session.get('health')

    if bmi is None:
        flash("No BMI result available. Please calculate your BMI first.", "warning")
        return redirect(url_for('dashboard'))

    # Expanded list of food items with BP considerations
    food_items = [
        {'food': 'Greek Yogurt with Honey', 'calories': 200, 'protein': 10, 'sugar': 20,
         'bp_recommendation': 'not recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Grilled Chicken Salad', 'calories': 350, 'protein': 30, 'sugar': 10,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Baked Salmon with Quinoa', 'calories': 450, 'protein': 40, 'sugar': 5,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Almonds', 'calories': 150, 'protein': 6, 'sugar': 1,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Oatmeal', 'calories': 150, 'protein': 5, 'sugar': 1,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Avocado Toast', 'calories': 300, 'protein': 8, 'sugar': 2,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Chicken Breast', 'calories': 250, 'protein': 30, 'sugar': 0,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Steamed Broccoli', 'calories': 55, 'protein': 4, 'sugar': 2,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Tuna Salad', 'calories': 200, 'protein': 25, 'sugar': 1,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Quinoa', 'calories': 220, 'protein': 8, 'sugar': 1,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Sweet Potato', 'calories': 100, 'protein': 2, 'sugar': 7,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Brown Rice', 'calories': 215, 'protein': 5, 'sugar': 0,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Scrambled Eggs', 'calories': 180, 'protein': 12, 'sugar': 1,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Mixed Nuts', 'calories': 200, 'protein': 5, 'sugar': 2,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Hummus with Carrots', 'calories': 180, 'protein': 6, 'sugar': 5,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Apple', 'calories': 95, 'protein': 0, 'sugar': 19,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Banana', 'calories': 105, 'protein': 1, 'sugar': 14,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Spinach Salad', 'calories': 100, 'protein': 3, 'sugar': 1,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Cottage Cheese', 'calories': 206, 'protein': 28, 'sugar': 6,
         'bp_recommendation': 'not recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'not recommended', 'asthma_recommendation': 'not recommended'},
        {'food': 'Turkey Breast', 'calories': 135, 'protein': 30, 'sugar': 0,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Chia Seeds Pudding', 'calories': 250, 'protein': 10, 'sugar': 7,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Peanut Butter', 'calories': 190, 'protein': 8, 'sugar': 3,
         'bp_recommendation': 'not recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'not recommended', 'asthma_recommendation': 'not recommended'},
        {'food': 'Whole Wheat Bread', 'calories': 80, 'protein': 4, 'sugar': 1,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Edamame', 'calories': 120, 'protein': 11, 'sugar': 2,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Tofu Stir-Fry', 'calories': 200, 'protein': 15, 'sugar': 6,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Kiwi', 'calories': 42, 'protein': 1, 'sugar': 8,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Pita Bread', 'calories': 170, 'protein': 6, 'sugar': 1,
         'bp_recommendation': 'recommended', 'sugar_recommendation': 'recommended',
         'heart_disease_recommendation': 'recommended', 'asthma_recommendation': 'recommended'},
        {'food': 'Tomato Soup', 'calories': 90, 'protein': 2, 'sugar': 12,
         'bp_recommendation': 'not recommended', 'sugar_recommendation': 'not recommended',
         'heart_disease_recommendation': 'not recommended', 'asthma_recommendation': 'not recommended'}
    ]

    # Function to calculate daily calorie needs
    def calculate_calories(weight, height, age, gender, activity_level):
        # Convert to float for calculations
        weight = float(weight)
        height = float(height)
        age = float(age)

        if gender == 'male':
            bmr = 88.362 + (13.397 * weight) + (4.799 * height * 100) - (5.677 * age)
        else:
            bmr = 447.593 + (9.247 * weight) + (3.098 * height * 100) - (4.330 * age)

        if activity_level == 'sedentary':
            calories_needed = bmr * 1.2
        elif activity_level == 'lightly active':
            calories_needed = bmr * 1.375
        elif activity_level == 'moderately active':
            calories_needed = bmr * 1.55
        elif activity_level == 'very active':
            calories_needed = bmr * 1.725
        else:
            calories_needed = bmr * 1.9

        return calories_needed

    # Function to determine weight gain or loss recommendation
    def weight_change_recommendation(bmi, calories_needed, has_bp):
        if bmi < 18.5:
            recommendation = 'You should consider gaining weight.'
        elif 18.5 <= bmi < 24.9:
            recommendation = 'Your weight is in a healthy range. Maintain your current weight.'
        else:
            recommendation = 'You should consider losing weight.'

        if recommendation == 'You should consider gaining weight.':
            caloric_intake = calories_needed + 500
        elif recommendation == 'You should consider losing weight.':
            caloric_intake = calories_needed - 500
        else:
            caloric_intake = calories_needed

        # Adjust for BP
        if has_bp:
            recommendation += ' Additionally, follow a low-sodium, low-sugar diet.'

        return recommendation, caloric_intake

    # Function to calculate daily protein needs
    def calculate_protein(caloric_intake):
        protein_needed = (0.15 * caloric_intake) / 4
        return protein_needed

    # Function to filter foods based on health conditions
    def filter_foods_by_conditions(food_items, has_bp, has_sugar, has_heart_disease, has_asthma):
        return [
            food for food in food_items
            if not (
                    (has_bp and food['bp_recommendation'] == 'not recommended') or
                    (has_sugar and food['sugar_recommendation'] == 'not recommended') or
                    (has_heart_disease and food['heart_disease_recommendation'] == 'not recommended') or
                    (has_asthma and food['asthma_recommendation'] == 'not recommended')
            )
        ]

    # Function to generate a meal plan considering health conditions
    def generate_meal_plan(caloric_intake, food_items, has_bp, has_sugar, has_heart_disease, has_asthma):
        eligible_foods = filter_foods_by_conditions(food_items, has_bp, has_sugar, has_heart_disease, has_asthma)
        meal_plan = []
        total_calories = 0
        max_attempts = 100
        attempts = 0

        while total_calories < caloric_intake and attempts < max_attempts:
            food = random.choice(eligible_foods)
            if total_calories + food['calories'] <= caloric_intake:
                meal_plan.append(food)
                total_calories += food['calories']
            attempts += 1

        if attempts >= max_attempts:
            print("Warning: Meal plan generation was limited by maximum attempts.")

        return meal_plan

    # Function to get list of not recommended foods for BP
    def get_not_recommended_foods(food_items):
        return [food for food in food_items if food['bp_recommendation'] == 'not recommended']

    # Example User Inputs
    age = 30
    activity_level = 'moderately active'
    has_bp = 'bp' in health
    has_sugar = 'sugar' in health
    has_heart_disease = 'heart_disease' in health
    has_asthma = 'asthma' in health

    # Calculate daily calorie needs
    calories_needed = calculate_calories(weight, height, age, gender, activity_level)

    # Weight change recommendation
    recommendation, caloric_intake = weight_change_recommendation(bmi, calories_needed, has_bp)

    # Calculate protein needs
    protein_needed = calculate_protein(caloric_intake)

    # Generate meal plan
    meal_plan = generate_meal_plan(caloric_intake, food_items, has_bp, has_sugar, has_heart_disease, has_asthma)

    # Get list of not recommended foods
    not_recommended_foods = get_not_recommended_foods(food_items)

    # Insert data into the database
    cur = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
    cur.execute(
        "INSERT INTO bmidata (age, gender, height, weight, health, bmi, predict, calories_needed, protein_needed, user_id) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
        (age, gender, height, weight, health, bmi, recommendation, calories_needed, protein_needed, userid))
    mysql.connection.commit()  # Commit the transaction
    cur.close()

    # Prepare data for rendering
    recommended_items = [{'food': meal['food'], 'calories': meal['calories'], 'protein': meal['protein'], 'sugar': meal['sugar']} for meal in meal_plan]
    not_recommended_items = [{'food': food['food'], 'calories': food['calories'], 'protein': food['protein'], 'sugar': food['sugar']} for food in not_recommended_foods]

    return render_template('bmi_result.html', bmi=bmi, goal=goal, calories_needed=calories_needed,
                           protein_needed=protein_needed, recommendation=recommendation,
                           recommended_items=recommended_items, not_recommended_items=not_recommended_items)


# @app.route('/bmi_result', methods=['GET'])
# def bmi_result():
#
#     bmi = session.get('bmi_result')
#     goal = session.get('result_model')
#     calories_needed = session.get('calories_needed')
#     protein_needed = session.get('protein_needed')
#     result_model = session.get('result_model')
#
#     if bmi is None:
#         flash("No BMI result available. Please calculate your BMI first.", "warning")
#         return redirect(url_for('dashboard'))
#
#     cur = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
#     try:
#         # Determine the user's goal
#         if result_model == "Loss Weight":
#             goal1 = 'Loss'
#         elif result_model == "Maintain Weight":
#             goal1 = 'Gain'
#         else:
#             goal1 = 'Gain'
#
#         # Query to fetch items based on the goal
#         cur.execute("SELECT * FROM dietplan_new WHERE category = %s", (goal1,))
#         food_items = cur.fetchall()
#
#         if len(food_items) > 2:
#             # Randomly select 2 items from the fetched results
#             selected_items = random.sample(food_items, 2)
#         else:
#             # If there are less than or equal to 2 items, just use them
#             selected_items = food_items
#
#         cur.close()
#
#     except Exception as e:
#         print(f"Error: {e}")
#         return "Error in code"
#
#     return render_template('bmi_result.html', bmi=bmi, goal=goal, calories_needed=calories_needed,
#                            protein_needed=protein_needed, all_data=food_items)





@app.route("/weight_loss_diet")
def weight_loss_diet():
    return render_template('user_weight_loss_dietplan.html')

@app.route("/weight_gain_diet")
def weight_gain_diet():
    return render_template('user_weight_gain_dietplan.html')


@app.route('/history')
def history():
    if session.get('user_id'):
        try:
            cur = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
            cur.execute("SELECT * FROM bmidata ORDER BY id DESC")
            profilelist = cur.fetchall()
            cur.close()

            return render_template('history.html', all_data=profilelist, )
        except Exception as e:
            return f"Error: {str(e)}"
    else:
        return redirect(url_for('login'))


@app.route('/delete_data/<int:id>', methods=['POST'])
def delete_data(id):
    cur = mysql.connection.cursor(MySQLdb.cursors.DictCursor)

    try:
        # Execute the delete query with parameterized input
        cur.execute("DELETE FROM bmidata WHERE id = %s", (id,))
        mysql.connection.commit()
    except Exception as e:
        print(f"Error: {e}")  # Log the error
        mysql.connection.rollback()  # Rollback in case of error
        abort(500)  # Return 500 Internal Server Error

    cur.close()
    return redirect(url_for('history'))


@app.route('/food_item')
def food_item():
    food = []

    with open('model/food_items_100.csv', newline='') as csvfile:
        csvreader = csv.DictReader(csvfile)
        for row in csvreader:
            food.append(row)

    return render_template('food_item_list.html', all_data=food)



import random


@app.route('/direct_food_item')
def direct_food_item():
    userid = session.get('user_id')  # Make sure session handling is correct
    result_model = session.get('result_model')

    # Determine the user's goal
    if result_model == "Loss Weight":
        goal = 'Loss'
    elif result_model == "Maintain Weight":
        goal = 'Gain'
    else:
        goal = 'Gain'

    cur = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
    try:
        # Query to fetch items based on the goal
        cur.execute("SELECT * FROM dietplan_new WHERE category = %s", (goal,))
        food_items = cur.fetchall()

        if len(food_items) > 2:
            # Randomly select 2 items from the fetched results
            selected_items = random.sample(food_items, 2)
        else:
            # If there are less than or equal to 2 items, just use them
            selected_items = food_items

        cur.close()

    except Exception as e:
        print(f"Error: {e}")
        return "Error in code"

    return render_template('direct_food_item_list.html', all_data=food_items)


@app.route('/user_adver')
def user_adver():
    return render_template('user_advertise.html')

#############################################################################



def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

def allowed_file_upload(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

from flask import send_from_directory

# Constant file path
UPLOAD_FOLDER = "static/results"

@app.route('/download_file/<filename>')
def download_file(filename):
    # Ensure filename is secure and does not contain path traversal characters
    from werkzeug.utils import secure_filename
    filename = secure_filename(filename)

    # Construct the full file path
    file_path = os.path.join(UPLOAD_FOLDER, filename)

    # Check if the file exists
    if os.path.exists(file_path):
        return send_from_directory(UPLOAD_FOLDER, filename, as_attachment=True)
    else:
        # Return a 404 error if the file does not exist
        abort(404)




@app.route('/delete_data_admin/<int:id>', methods=['POST'])
def delete_data_admin(id):
    cur = mysql.connection.cursor(MySQLdb.cursors.DictCursor)

    try:
        # Execute the delete query with parameterized input
        cur.execute("DELETE FROM history WHERE id = %s", (id,))
        mysql.connection.commit()
    except Exception as e:
        print(f"Error: {e}")  # Log the error
        mysql.connection.rollback()  # Rollback in case of error
        abort(500)  # Return 500 Internal Server Error

    cur.close()
    return redirect(url_for('admin-view-history'))


@app.route('/', methods=['GET', 'POST'])
def index():
    return render_template('main_dashboard.html')
















ALLOWED_EXTENSIONS = {'wav', 'mp3'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/logout')
def logout():
    session.pop('user_id', None)
    session.pop('user_email', None)
    return redirect(url_for('login'))


@app.route('/admin', methods=['GET', 'POST'])
def admin():
    error = None

    if request.method == "POST":
        username = request.form['username']
        password = request.form['password']


        if username=="admin" and password=="star":
            flash("Admin are logged in successfully!")

            return redirect(url_for('admin_dashboard'))

        else:
            flash("Invalid username or password")

    return render_template('admin_login.html', error=error)


@app.route('/admin_dashboard')
def admin_dashboard():
    # Retrieve road requests with user IDs
    cur = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
    cur.execute("SELECT * FROM users")
    profilelist = cur.fetchall()
    total_student = len(profilelist)
    cur.close()

    cur = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
    cur.execute("SELECT * FROM bmidata")
    h = cur.fetchall()
    total_his = len(h)
    cur.close()

    return render_template('admin_dashboard.html', total_student=total_student, total_his=total_his)


@app.route('/admin-view-user')
def adminviewemp():
    try:
        cur = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cur.execute("SELECT * FROM users")
        profilelist = cur.fetchall()
        cur.close()

        return render_template('admin_userlist.html', profilelist=profilelist, )
    except Exception as e:
        return f"Error: {str(e)}"


@app.route('/admin-view-history')
def adminviewhis():
    try:
        cur = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cur.execute("SELECT * FROM bmidata ORDER BY id DESC")
        profilelist = cur.fetchall()
        cur.close()

        return render_template('admin_history.html', all_data=profilelist, )
    except Exception as e:
        return f"Error: {str(e)}"





@app.route('/user_profile', methods=['GET', 'POST'])
def user_profile():
    # Ensure the user is logged in
    if 'user_id' not in session:
        flash("You need to log in first", "warning")
        return redirect(url_for('login'))

    user_id = session['user_id']

    if request.method == 'POST':
        # Get the form data
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        phone = request.form['phone']
        address = request.form['address']

        # Update the user's information in the database
        cur = mysql.connection.cursor()
        if password:
            cur.execute("""
                UPDATE users 
                SET username = %s, email = %s, password = %s, phone = %s, address = %s 
                WHERE id = %s
            """, (username, email, password, phone, address, user_id))
        else:
            cur.execute("""
                UPDATE users 
                SET username = %s, email = %s, phone = %s, address = %s 
                WHERE id = %s
            """, (username, email, phone, address, user_id))

        mysql.connection.commit()
        cur.close()

        # Update session data if email was changed
        session['user_email'] = email

        flash("Your profile has been updated successfully!", "success")
        return redirect(url_for('dashboard'))

    # If GET request, fetch the user's current data
    cur = mysql.connection.cursor()
    cur.execute("SELECT username, email, phone, address FROM users WHERE id = %s", (user_id,))
    user = cur.fetchone()
    cur.close()

    return render_template('user_profile.html', user=user)











if __name__ == '__main__':
    app.run(debug=True)